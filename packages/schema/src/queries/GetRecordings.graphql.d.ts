/* c5ea01b9afa3150895cbeab39ad9dc55c1bcb706
 * This file is automatically generated by graphql-let. */

import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';
export declare type Maybe<T> = T | null;
export declare type Exact<
  T extends {
    [key: string]: unknown;
  }
> = {
  [K in keyof T]: T[K];
};
/** All built-in and custom scalars, mapped to their actual values */
export declare type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
};
export declare type Recording = {
  __typename?: 'Recording';
  replaceThisBullshxt: Scalars['String'];
};
export declare type Query = {
  __typename?: 'Query';
  getRecordings: Array<Maybe<Recording>>;
};
export declare enum CacheControlScope {
  Public = 'PUBLIC',
  Private = 'PRIVATE',
}
export declare type GetRecordingsQueryVariables = Exact<{
  [key: string]: never;
}>;
export declare type GetRecordingsQuery = {
  __typename?: 'Query';
} & {
  getRecordings: Array<
    Maybe<
      {
        __typename?: 'Recording';
      } & Pick<Recording, 'replaceThisBullshxt'>
    >
  >;
};
export declare const GetRecordingsDocument: DocumentNode<
  GetRecordingsQuery,
  GetRecordingsQueryVariables
>;
