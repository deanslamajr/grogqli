/* c5ea01b9afa3150895cbeab39ad9dc55c1bcb706
 * This file is automatically generated by graphql-let. */

import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';
export type Maybe<T> = T | null;
export type Exact<T extends { [key: string]: unknown }> = {
  [K in keyof T]: T[K];
};
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
};

export type Recording = {
  __typename?: 'Recording';
  replaceThisBullshxt: Scalars['String'];
};

export type Query = {
  __typename?: 'Query';
  getRecordings: Array<Maybe<Recording>>;
};

export enum CacheControlScope {
  Public = 'PUBLIC',
  Private = 'PRIVATE',
}

export type GetRecordingsQueryVariables = Exact<{ [key: string]: never }>;

export type GetRecordingsQuery = { __typename?: 'Query' } & {
  getRecordings: Array<
    Maybe<{ __typename?: 'Recording' } & Pick<Recording, 'replaceThisBullshxt'>>
  >;
};

export const GetRecordingsDocument: DocumentNode<
  GetRecordingsQuery,
  GetRecordingsQueryVariables
> = {
  kind: 'Document',
  definitions: [
    {
      kind: 'OperationDefinition',
      operation: 'query',
      name: { kind: 'Name', value: 'GetRecordings' },
      variableDefinitions: [],
      directives: [],
      selectionSet: {
        kind: 'SelectionSet',
        selections: [
          {
            kind: 'Field',
            name: { kind: 'Name', value: 'getRecordings' },
            arguments: [],
            directives: [],
            selectionSet: {
              kind: 'SelectionSet',
              selections: [
                {
                  kind: 'Field',
                  name: { kind: 'Name', value: 'replaceThisBullshxt' },
                  arguments: [],
                  directives: [],
                },
              ],
            },
          },
        ],
      },
    },
  ],
};
