/* 19e2a83fe6fe9e6d3b02a3fec9aa6d0a4b316e35
 * This file is automatically generated by graphql-let. */

import { GraphQLResolveInfo } from 'graphql';
import * as Apollo from '@apollo/client';
export declare type Maybe<T> = T | null;
export declare type Exact<T extends {
    [key: string]: unknown;
}> = {
    [K in keyof T]: T[K];
};
/** All built-in and custom scalars, mapped to their actual values */
export declare type Scalars = {
    ID: string;
    String: string;
    Boolean: boolean;
    Int: number;
    Float: number;
};
export declare type Recording = {
    __typename?: 'Recording';
    replaceThisBullshxt: Scalars['String'];
};
export declare type Query = {
    __typename?: 'Query';
    getRecordings: Array<Maybe<Recording>>;
};
export declare type GetRecordingsQueryVariables = Exact<{
    [key: string]: never;
}>;
export declare type GetRecordingsQuery = ({
    __typename?: 'Query';
} & {
    getRecordings: Array<Maybe<({
        __typename?: 'Recording';
    } & Pick<Recording, 'replaceThisBullshxt'>)>>;
});
export declare type ResolverTypeWrapper<T> = Promise<T> | T;
export declare type LegacyStitchingResolver<TResult, TParent, TContext, TArgs> = {
    fragment: string;
    resolve: ResolverFn<TResult, TParent, TContext, TArgs>;
};
export declare type NewStitchingResolver<TResult, TParent, TContext, TArgs> = {
    selectionSet: string;
    resolve: ResolverFn<TResult, TParent, TContext, TArgs>;
};
export declare type StitchingResolver<TResult, TParent, TContext, TArgs> = LegacyStitchingResolver<TResult, TParent, TContext, TArgs> | NewStitchingResolver<TResult, TParent, TContext, TArgs>;
export declare type Resolver<TResult, TParent = {}, TContext = {}, TArgs = {}> = ResolverFn<TResult, TParent, TContext, TArgs> | StitchingResolver<TResult, TParent, TContext, TArgs>;
export declare type ResolverFn<TResult, TParent, TContext, TArgs> = (parent: TParent, args: TArgs, context: TContext, info: GraphQLResolveInfo) => Promise<TResult> | TResult;
export declare type SubscriptionSubscribeFn<TResult, TParent, TContext, TArgs> = (parent: TParent, args: TArgs, context: TContext, info: GraphQLResolveInfo) => AsyncIterator<TResult> | Promise<AsyncIterator<TResult>>;
export declare type SubscriptionResolveFn<TResult, TParent, TContext, TArgs> = (parent: TParent, args: TArgs, context: TContext, info: GraphQLResolveInfo) => TResult | Promise<TResult>;
export interface SubscriptionSubscriberObject<TResult, TKey extends string, TParent, TContext, TArgs> {
    subscribe: SubscriptionSubscribeFn<{
        [key in TKey]: TResult;
    }, TParent, TContext, TArgs>;
    resolve?: SubscriptionResolveFn<TResult, {
        [key in TKey]: TResult;
    }, TContext, TArgs>;
}
export interface SubscriptionResolverObject<TResult, TParent, TContext, TArgs> {
    subscribe: SubscriptionSubscribeFn<any, TParent, TContext, TArgs>;
    resolve: SubscriptionResolveFn<TResult, any, TContext, TArgs>;
}
export declare type SubscriptionObject<TResult, TKey extends string, TParent, TContext, TArgs> = SubscriptionSubscriberObject<TResult, TKey, TParent, TContext, TArgs> | SubscriptionResolverObject<TResult, TParent, TContext, TArgs>;
export declare type SubscriptionResolver<TResult, TKey extends string, TParent = {}, TContext = {}, TArgs = {}> = ((...args: any[]) => SubscriptionObject<TResult, TKey, TParent, TContext, TArgs>) | SubscriptionObject<TResult, TKey, TParent, TContext, TArgs>;
export declare type TypeResolveFn<TTypes, TParent = {}, TContext = {}> = (parent: TParent, context: TContext, info: GraphQLResolveInfo) => Maybe<TTypes> | Promise<Maybe<TTypes>>;
export declare type IsTypeOfResolverFn<T = {}> = (obj: T, info: GraphQLResolveInfo) => boolean | Promise<boolean>;
export declare type NextResolverFn<T> = () => Promise<T>;
export declare type DirectiveResolverFn<TResult = {}, TParent = {}, TContext = {}, TArgs = {}> = (next: NextResolverFn<TResult>, parent: TParent, args: TArgs, context: TContext, info: GraphQLResolveInfo) => TResult | Promise<TResult>;
/** Mapping between all available schema types and the resolvers types */
export declare type ResolversTypes = {
    Recording: ResolverTypeWrapper<Recording>;
    String: ResolverTypeWrapper<Scalars['String']>;
    Query: ResolverTypeWrapper<{}>;
    Boolean: ResolverTypeWrapper<Scalars['Boolean']>;
};
/** Mapping between all available schema types and the resolvers parents */
export declare type ResolversParentTypes = {
    Recording: Recording;
    String: Scalars['String'];
    Query: {};
    Boolean: Scalars['Boolean'];
};
export declare type RecordingResolvers<ContextType = any, ParentType extends ResolversParentTypes['Recording'] = ResolversParentTypes['Recording']> = {
    replaceThisBullshxt?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType>;
};
export declare type QueryResolvers<ContextType = any, ParentType extends ResolversParentTypes['Query'] = ResolversParentTypes['Query']> = {
    getRecordings?: Resolver<Array<Maybe<ResolversTypes['Recording']>>, ParentType, ContextType>;
};
export declare type Resolvers<ContextType = any> = {
    Recording?: RecordingResolvers<ContextType>;
    Query?: QueryResolvers<ContextType>;
};
/**
 * @deprecated
 * Use "Resolvers" root object instead. If you wish to get "IResolvers", add "typesPrefix: I" to your config.
 */
export declare type IResolvers<ContextType = any> = Resolvers<ContextType>;
export declare const GetRecordingsDocument: Apollo.DocumentNode;
/**
 * __useGetRecordingsQuery__
 *
 * To run a query within a React component, call `useGetRecordingsQuery` and pass it any options that fit your needs.
 * When your component renders, `useGetRecordingsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useGetRecordingsQuery({
 *   variables: {
 *   },
 * });
 */
export declare function useGetRecordingsQuery(baseOptions?: Apollo.QueryHookOptions<GetRecordingsQuery, GetRecordingsQueryVariables>): Apollo.QueryResult<GetRecordingsQuery, Exact<{
    [key: string]: never;
}>>;
export declare function useGetRecordingsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetRecordingsQuery, GetRecordingsQueryVariables>): Apollo.QueryTuple<GetRecordingsQuery, Exact<{
    [key: string]: never;
}>>;
export declare type GetRecordingsQueryHookResult = ReturnType<typeof useGetRecordingsQuery>;
export declare type GetRecordingsLazyQueryHookResult = ReturnType<typeof useGetRecordingsLazyQuery>;
export declare type GetRecordingsQueryResult = Apollo.QueryResult<GetRecordingsQuery, GetRecordingsQueryVariables>;
